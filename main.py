import streamlit as st
from langchain_ollama import OllamaLLM
from langchain_core.prompts import ChatPromptTemplate

# ---------- Prompt ----------
template = """
Tu es un professeur de sciences au lyc√©e. Sois clair, concis et p√©dagogue.
Explique les r√©ponses en utilisant des exemples simples et un langage adapt√© aux √©l√®ves de 16 ans.

Voici des informations tir√©es d'un document fourni par l'utilisateur :
{doc_context}

Voici l'historique de la conversation :
{chat_context}

Question : {question}

R√©ponse :
"""

model  = OllamaLLM(model="mistral")
prompt = ChatPromptTemplate.from_template(template)
chain  = prompt | model

# ---------- Streamlit ----------
st.set_page_config("Alexandra prof de Teccart", ":microscope:", layout="centered")
st.title("üë©‚Äçüè´ Alexandra, prof de Teccart")

# √âtat de session
st.session_state.setdefault("chat_history", [])
st.session_state.setdefault("doc_text", "")

# -- Chargement de document --------------------------------------------------
with st.sidebar:
    st.header("Charger un document")
    uploaded = st.file_uploader("T√©l√©charger .txt / .pdf / .docx", type=["txt", "pdf", "docx"])
    if uploaded:
        ext = uploaded.name.lower().split(".")[-1]

        if ext == "pdf":
            from pypdf import PdfReader
            reader = PdfReader(uploaded)
            text = "\n".join(p.extract_text() or "" for p in reader.pages)

        elif ext == "docx":
            import docx
            doc  = docx.Document(uploaded)
            text = "\n".join(p.text for p in doc.paragraphs)

        else:  # .txt
            text = uploaded.read().decode("utf-8")

        st.session_state.doc_text = text.strip()[:20_000]
        st.success("Document charg√© ! Posez maintenant vos questions ‚Üì")

# -- Affichage de l‚Äôhistorique ----------------------------------------------
for speaker, msg in st.session_state.chat_history:
    avatar = "üßë" if speaker == "Vous" else "üë©‚Äçüè´"
    st.markdown(f"**{avatar} {speaker}** : {msg}")

# -- Entr√©e utilisateur et g√©n√©ration ---------------------------------------
user_input = st.chat_input("Posez votre question‚Ä¶")

if user_input:
    with st.spinner("Alexandra r√©fl√©chit‚Ä¶"):
        result = chain.invoke(
            {
                "doc_context": st.session_state.doc_text or "Aucun document fourni.",
                "chat_context": "\n".join(f"{s}: {m}" for s, m in st.session_state.chat_history),
                "question": user_input          # ‚úÖ fourni !
            }
        )

    # Mettre √† jour l‚Äôhistorique
    st.session_state.chat_history.extend([("Vous", user_input),
                                          ("Alexandra", result)])

    st.success(result)
